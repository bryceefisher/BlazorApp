@page "/Fermentables/edit"
@inject MysqlhomebrewContext DB
@using BlazorApp.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using BlazorApp.Data

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Fermentable</h4>
<hr />
@if (Fermentable is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Fermentable" OnValidSubmit="UpdateFermentable" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Fermentable.Id" value="@Fermentable.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Fermentable.Name" class="form-control" />
                    <ValidationMessage For="() => Fermentable.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="type" class="form-label">Type:</label>
                    <InputText id="type" @bind-Value="Fermentable.Type" class="form-control" />
                    <ValidationMessage For="() => Fermentable.Type" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="origin" class="form-label">Origin:</label>
                    <InputText id="origin" @bind-Value="Fermentable.Origin" class="form-control" />
                    <ValidationMessage For="() => Fermentable.Origin" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="color" class="form-label">Color:</label>
                    <InputNumber id="color" @bind-Value="Fermentable.Color" class="form-control" />
                    <ValidationMessage For="() => Fermentable.Color" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="potentialgravity" class="form-label">PotentialGravity:</label>
                    <InputNumber id="potentialgravity" @bind-Value="Fermentable.PotentialGravity" class="form-control" />
                    <ValidationMessage For="() => Fermentable.PotentialGravity" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="maxinbatch" class="form-label">MaxInBatch:</label>
                    <InputNumber id="maxinbatch" @bind-Value="Fermentable.MaxInBatch" class="form-control" />
                    <ValidationMessage For="() => Fermentable.MaxInBatch" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/fermentables">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Fermentable? Fermentable { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Fermentable ??= await DB.Fermentables.FirstOrDefaultAsync(m => m.Id == Id);

        if (Fermentable is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateFermentable()
    {
        DB.Attach(Fermentable!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!FermentableExists(Fermentable!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/fermentables");
    }

    bool FermentableExists(int id)
    {
        return DB.Fermentables.Any(e => e.Id == id);
    }
}
